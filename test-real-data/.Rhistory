"make_weights",
"calcul_facteurs_v1",
"scenario_moyen",
"echeancier"
#"v_RF_nodesize",
#"v_w_RF_max_ratio_weights",
#"v_w_RF_weights",
#"ntree",
#"phi",
#"phi.args"
),
.verbose = F) %dopar% {
set.seed(seed + i)
cat(paste0(i," in ", n_repet, "\n"),
file = "computation_progress.txt",
append = TRUE)
train_lines = sample(1:nrow(data), size = n_train)
test_lines = sample(setdiff(1:nrow(data), train_lines), size = n_test)
print(phi)
# Computation of mat_weights through a call to Cox_regression
# impossible to make a unique Call to Cox_regression since we use a max_ratio_weights_eval argument
# in the call in which we compute the results
res_mat_weights = Cox_regression(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines, ],
data_test = data[test_lines, ],
max_value = max_value,
eval_methods = c("weighted"),
types_weights_eval = c("KM", "Cox", "RSF", "0_1"),
max_ratio_weights_eval = 1000,
cox.object = F)
mat_weights = rbind(res_mat_weights$mat_weights_train,
res_mat_weights$mat_weights_test)
# w_RF
## mode 1
param_w_RF_mode1 = expand.grid(type_pred = NA,
algo = "w_RF1",
type_weights = v_w_RF_mode1_type_weights,
nodesize = v_w_RF_mode1_nodesize,
maxdepth = v_w_RF_mode1_maxdepth,
max_ratio_weights_model = v_w_RF_mode1_max_ratio_weights_model)
res_w_RF_mode1 = do.call(rbind, lapply(X = 1:nrow(param_w_RF_mode1),
FUN = function(j){
unlist(weighted_regression_survival(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
type_regression = "RF",
type_weights = param_w_RF_mode1$type_weights[j],
max_value =  max_value,
phi = phi,
phi.args = phi.args,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_model = param_w_RF_mode1$max_ratio_weights_model[j],
max_ratio_weights_eval = max_ratio_weights_eval,
weighted_regression.object = F,
censoring_model.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights,
mode_w_RF = 1,
nodesize = param_w_RF_mode1$nodesize[j],
nodedepth = param_w_RF_mode1$maxdepth[j],
sampsize = length(train_lines), # for the sample size being the same as the train dataset
# nsplit = 10,
ntree = ntree,
mtry = length(x_vars)
)$list_criteria_test)
}
))
## mode 2
param_w_RF_mode2 = expand.grid(type_pred = c("weights_tree", "KM_local"),
algo = "w_RF2",
type_weights = v_w_RF_mode2_type_weights,
nodesize = v_w_RF_mode2_nodesize,
maxdepth = v_w_RF_mode2_maxdepth,
max_ratio_weights_model = v_w_RF_mode2_max_ratio_weights_model)
param_w_RF_mode2_bis = unique(param_w_RF_mode2[,c("algo", "type_weights", "nodesize", "maxdepth", "max_ratio_weights_model")])
res_w_RF_mode2 = do.call(rbind, lapply(X = 1:nrow(param_w_RF_mode2_bis),
FUN = function(j){
one_res_w_RF_mode2 = weighted_regression_survival(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
type_regression = "RF",
type_weights = param_w_RF_mode2_bis$type_weights[j],
max_value =  max_value,
phi = phi,
phi.args = phi.args,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_model = param_w_RF_mode2_bis$max_ratio_weights_model[j],
max_ratio_weights_eval = max_ratio_weights_eval,
weighted_regression.object = F,
censoring_model.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights,
mode_w_RF = 2,
minbucket = param_w_RF_mode2_bis$nodesize[j] * floor(mean(data[train_lines, delta_var])),
maxdepth = param_w_RF_mode2_bis$maxdepth[j],
ntree = ntree,
cp = 0,
xval = 0)
return(rbind(unlist(one_res_w_RF_mode2$list_criteria_test),
unlist(one_res_w_RF_mode2$list_criteria_test_KMloc)))
}
))
# w_gam
param_w_gam = expand.grid(type_pred = NA,
algo = "w_gam",
type_weights = v_w_gam_type_weights,
nodesize = NA,
maxdepth = NA,
max_ratio_weights_model = v_w_gam_max_ratio_weights_model)
res_w_gam = do.call(rbind, lapply(X = 1:nrow(param_w_gam),
FUN = function(j){
unlist(weighted_regression_survival(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
type_regression = "gam",
type_weights = param_w_gam$type_weights[j],
max_value =  max_value,
phi = phi,
phi.args = phi.args,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_model = param_w_gam$max_ratio_weights_model[j],
max_ratio_weights_eval = max_ratio_weights_eval,
weighted_regression.object = F,
censoring_model.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights
)$list_criteria_test)
}
))
# RSF_regression
param_RSF_regression = expand.grid(type_pred = NA,
algo = "RSF_regression",
type_weights = NA,
nodesize = v_RSF_reg_nodesize,
maxdepth = v_RSF_maxdepth,
max_ratio_weights_model = NA)
res_RSF_regression = do.call(rbind, lapply(X = 1:nrow(param_RSF_regression),
FUN = function(j){
unlist(RSF_regression(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
max_value =  max_value,
phi = phi,
phi.args = phi.args,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_eval = max_ratio_weights_eval,
RSF.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights,
nodesize = param_RSF_regression$nodesize[j],
nodedepth = param_RSF_regression$maxdepth[j],
# nsplit = 10,
ntree = ntree,
mtry = length(x_vars)
)$list_criteria_test)
}
)
)
# Cox_regression
param_Cox_regression = expand.grid(type_pred = NA,
algo = "Cox_regression",
type_weights = NA,
nodesize = NA,
maxdepth = NA,
max_ratio_weights_model = NA)
res_Cox_regression = do.call(rbind, lapply(X = 1:nrow(param_Cox_regression),
FUN = function(j){
unlist(Cox_regression(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
max_value = max_value,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_eval = max_ratio_weights_eval,
phi = phi,
phi.args = phi.args,
cox.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights
)$list_criteria_test)
}
)
)
return(cbind(censoring_rate_with_threshold = res_mat_weights$censoring_rate_with_threshold,
rbind(param_w_RF_mode1, param_w_RF_mode2, param_w_gam, param_RSF_regression, param_Cox_regression),
iter = i,
rbind(res_w_RF_mode1, res_w_RF_mode2, res_w_gam, res_RSF_regression, res_Cox_regression)))
}
stopCluster(cl)
return(res)
}
t1 = Sys.time()
res_santiane_fct_cash_flow = make_result_real_data(y_var = "y",
delta_var = "delta",
x_vars = var7,
data = base_etude[,c("y","delta",var7)],
n_train = 1000, #5000
n_test = 1000, #5000
max_value = 1465,
phi = calcul_facteurs_one,
phi.args = list(echeancier = echeancier,
scenario = scenario_moyen,
type = 2),
eval_methods = c("concordance", "weighted", "group"),
types_weights_eval = c("KM","Cox","RSF", "0_1"),
max_ratio_weights_eval = 1000,
v_bandwidth = c(20, 50),
v_w_RF_mode1_type_weights = c("KM","Cox","RSF"),
v_w_RF_mode2_type_weights = c("KM","Cox"),
v_w_gam_type_weights = c("KM","Cox", "RSF"),
v_w_RF_mode1_nodesize = c(100),
v_w_RF_mode2_nodesize = c(100),
v_RSF_reg_nodesize = c(100),
v_w_RF_mode1_max_ratio_weights_model = c(10, 50),#, 50
v_w_RF_mode2_max_ratio_weights_model = c(10, 50),#, 50
v_w_gam_max_ratio_weights_model = c(10, 50),#, 50
v_w_RF_mode1_maxdepth = 5,
v_w_RF_mode2_maxdepth = 5,
v_RSF_maxdepth = 5,
ntree = 100,
n_repet = 2,#50
seed = 0)
res_mat_weights = Cox_regression(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines, ],
data_test = data[test_lines, ],
max_value = max_value,
eval_methods = c("weighted"),
types_weights_eval = c("KM", "Cox", "RSF", "0_1"),
max_ratio_weights_eval = 1000,
cox.object = F)
make_result_real_data = function(y_var,
delta_var,
x_vars,
data,
n_train,
n_test,
max_value,
phi = function(x){x},
phi.args = list(),
eval_methods,
types_weights_eval,
max_ratio_weights_eval,
v_bandwidth = NULL,
v_w_RF_mode1_type_weights,
v_w_RF_mode2_type_weights,
v_w_gam_type_weights,
v_w_RF_mode1_nodesize,
v_w_RF_mode2_nodesize,
v_RSF_reg_nodesize,
v_w_RF_mode1_max_ratio_weights_model,
v_w_RF_mode2_max_ratio_weights_model,
v_w_gam_max_ratio_weights_model,
v_w_RF_mode1_maxdepth,
v_w_RF_mode2_maxdepth,
v_RSF_maxdepth,
ntree,
n_repet,
seed){
data = data[,c(y_var, delta_var, x_vars)]
cat("", file = "computation_progress.txt")
n_cores <- detectCores() - 1
cl <- makeCluster(n_cores)
registerDoParallel(cl)
res = foreach(i=1:n_repet,
.combine = rbind,
.packages = c("survival",
"randomForestSRC",
"mgcv",
"rpart"
#"dplyr",
#"caret"
),
.export= c(
# functions of the package
"RSF_regression",
"Cox_regression",
"weighted_regression_survival",
"make_res_weighted_regression",
"rpartRF",
"predict_nodes",
"predict.rpartRF",
"NormalizedGini",
"SumModelGini",
"eval_aggregated_criteria",
"eval_weighted_criteria",
"eval_model",
"make_weights_from_survival_curves",
"make_KM_weights",
"make_weights",
"calcul_facteurs_v1",
"scenario_moyen",
"echeancier"
#"v_RF_nodesize",
#"v_w_RF_max_ratio_weights",
#"v_w_RF_weights",
#"ntree",
#"phi",
#"phi.args"
),
.verbose = F) %dopar% {
set.seed(seed + i)
cat(paste0(i," in ", n_repet, "\n"),
file = "computation_progress.txt",
append = TRUE)
train_lines = sample(1:nrow(data), size = n_train)
test_lines = sample(setdiff(1:nrow(data), train_lines), size = n_test)
# Computation of mat_weights through a call to Cox_regression
# impossible to make a unique Call to Cox_regression since we use a max_ratio_weights_eval argument
# in the call in which we compute the results
res_mat_weights = Cox_regression(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines, ],
data_test = data[test_lines, ],
max_value = max_value,
eval_methods = c("weighted"),
types_weights_eval = c("KM", "Cox", "RSF", "0_1"),
max_ratio_weights_eval = 1000,
cox.object = F)
mat_weights = rbind(res_mat_weights$mat_weights_train,
res_mat_weights$mat_weights_test)
# w_RF
## mode 1
param_w_RF_mode1 = expand.grid(type_pred = NA,
algo = "w_RF1",
type_weights = v_w_RF_mode1_type_weights,
nodesize = v_w_RF_mode1_nodesize,
maxdepth = v_w_RF_mode1_maxdepth,
max_ratio_weights_model = v_w_RF_mode1_max_ratio_weights_model)
res_w_RF_mode1 = do.call(rbind, lapply(X = 1:nrow(param_w_RF_mode1),
FUN = function(j){
unlist(weighted_regression_survival(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
type_regression = "RF",
type_weights = param_w_RF_mode1$type_weights[j],
max_value =  max_value,
phi = phi,
phi.args = phi.args,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_model = param_w_RF_mode1$max_ratio_weights_model[j],
max_ratio_weights_eval = max_ratio_weights_eval,
weighted_regression.object = F,
censoring_model.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights,
mode_w_RF = 1,
nodesize = param_w_RF_mode1$nodesize[j],
nodedepth = param_w_RF_mode1$maxdepth[j],
sampsize = length(train_lines), # for the sample size being the same as the train dataset
# nsplit = 10,
ntree = ntree,
mtry = length(x_vars)
)$list_criteria_test)
}
))
## mode 2
param_w_RF_mode2 = expand.grid(type_pred = c("weights_tree", "KM_local"),
algo = "w_RF2",
type_weights = v_w_RF_mode2_type_weights,
nodesize = v_w_RF_mode2_nodesize,
maxdepth = v_w_RF_mode2_maxdepth,
max_ratio_weights_model = v_w_RF_mode2_max_ratio_weights_model)
param_w_RF_mode2_bis = unique(param_w_RF_mode2[,c("algo", "type_weights", "nodesize", "maxdepth", "max_ratio_weights_model")])
res_w_RF_mode2 = do.call(rbind, lapply(X = 1:nrow(param_w_RF_mode2_bis),
FUN = function(j){
one_res_w_RF_mode2 = weighted_regression_survival(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
type_regression = "RF",
type_weights = param_w_RF_mode2_bis$type_weights[j],
max_value =  max_value,
phi = phi,
phi.args = phi.args,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_model = param_w_RF_mode2_bis$max_ratio_weights_model[j],
max_ratio_weights_eval = max_ratio_weights_eval,
weighted_regression.object = F,
censoring_model.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights,
mode_w_RF = 2,
minbucket = param_w_RF_mode2_bis$nodesize[j] * floor(mean(data[train_lines, delta_var])),
maxdepth = param_w_RF_mode2_bis$maxdepth[j],
ntree = ntree,
cp = 0,
xval = 0)
return(rbind(unlist(one_res_w_RF_mode2$list_criteria_test),
unlist(one_res_w_RF_mode2$list_criteria_test_KMloc)))
}
))
# w_gam
param_w_gam = expand.grid(type_pred = NA,
algo = "w_gam",
type_weights = v_w_gam_type_weights,
nodesize = NA,
maxdepth = NA,
max_ratio_weights_model = v_w_gam_max_ratio_weights_model)
res_w_gam = do.call(rbind, lapply(X = 1:nrow(param_w_gam),
FUN = function(j){
unlist(weighted_regression_survival(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
type_regression = "gam",
type_weights = param_w_gam$type_weights[j],
max_value =  max_value,
phi = phi,
phi.args = phi.args,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_model = param_w_gam$max_ratio_weights_model[j],
max_ratio_weights_eval = max_ratio_weights_eval,
weighted_regression.object = F,
censoring_model.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights
)$list_criteria_test)
}
))
# RSF_regression
param_RSF_regression = expand.grid(type_pred = NA,
algo = "RSF_regression",
type_weights = NA,
nodesize = v_RSF_reg_nodesize,
maxdepth = v_RSF_maxdepth,
max_ratio_weights_model = NA)
res_RSF_regression = do.call(rbind, lapply(X = 1:nrow(param_RSF_regression),
FUN = function(j){
unlist(RSF_regression(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
max_value =  max_value,
phi = phi,
phi.args = phi.args,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_eval = max_ratio_weights_eval,
RSF.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights,
nodesize = param_RSF_regression$nodesize[j],
nodedepth = param_RSF_regression$maxdepth[j],
# nsplit = 10,
ntree = ntree,
mtry = length(x_vars)
)$list_criteria_test)
}
)
)
# Cox_regression
param_Cox_regression = expand.grid(type_pred = NA,
algo = "Cox_regression",
type_weights = NA,
nodesize = NA,
maxdepth = NA,
max_ratio_weights_model = NA)
res_Cox_regression = do.call(rbind, lapply(X = 1:nrow(param_Cox_regression),
FUN = function(j){
unlist(Cox_regression(y_var = y_var,
delta_var = delta_var,
x_vars = x_vars,
data_train = data[train_lines,],
data_test = data[test_lines,],
max_value = max_value,
eval_methods = eval_methods,
types_weights_eval = types_weights_eval,
max_ratio_weights_eval = max_ratio_weights_eval,
phi = phi,
phi.args = phi.args,
cox.object = F,
v_bandwidth = v_bandwidth,
mat_weights = mat_weights
)$list_criteria_test)
}
)
)
return(cbind(censoring_rate_with_threshold = res_mat_weights$censoring_rate_with_threshold,
rbind(param_w_RF_mode1, param_w_RF_mode2, param_w_gam, param_RSF_regression, param_Cox_regression),
iter = i,
rbind(res_w_RF_mode1, res_w_RF_mode2, res_w_gam, res_RSF_regression, res_Cox_regression)))
}
stopCluster(cl)
return(res)
}
