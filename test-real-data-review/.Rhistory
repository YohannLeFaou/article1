unlist(one_res_w_RF_mode2$perf_test_KMloc)))
}
)
)
# # w_gam
# param_w_gam = expand.grid(type_pred = NA,
#                           algo = "w_gam",
#                           type_w = v_w_gam_type_w,
#                           minleaf = NA,
#                           maxdepth = NA,
#                           max_w_mod = v_w_gam_max_w_mod)
#
#
# res_w_gam = do.call(rbind, lapply(X = 1:nrow(param_w_gam),
#                                   FUN = function(j){
#                                     unlist(sw_reg(y_var = "y",
#                                                   delta_var = "delta",
#                                                   x_vars = paste0("v",1:grid_param$n_vars[i]),
#                                                   train = data_sim[train_lines,],
#                                                   test = data_sim[-train_lines,],
#                                                   type_reg = "gam",
#                                                   type_w = param_w_gam$type_w[j],
#                                                   max_time =  grid_param$censoring_threshold[i],
#                                                   phi = phi,
#                                                   phi.args = phi.args,
#                                                   ev_methods = ev_methods,
#                                                   types_w_ev = types_w_ev,
#                                                   max_w_mod = param_w_gam$max_w_mod[j],
#                                                   max_w_ev = max_w_ev,
#                                                   sw_reg_obj = F,
#                                                   cens_mod_obj = F,
#                                                   bandwidths = bandwidths,
#                                                   mat_w = mat_w,
#                                                   y_no_cens_var = "Te"
#                                     )$perf_test)
#                                   }
# ))
# rsf_reg
param_rsf_reg = expand.grid(type_pred = NA,
algo = "rsf_reg",
type_w = NA,
minleaf = v_RSF_reg_minleaf,
maxdepth = v_RSF_maxdepth,
max_w_mod = NA)
res_rsf_reg = do.call(rbind, lapply(X = 1:nrow(param_rsf_reg),
FUN = function(j){
unlist(rsf_reg(y_var = "y",
delta_var = "delta",
x_vars = paste0("v",1:grid_param$n_vars[i]),
train = data_sim[train_lines,],
test = data_sim[-train_lines,],
max_time =  grid_param$censoring_threshold[i],
phi = phi,
phi.args = phi.args,
ev_methods = ev_methods,
types_w_ev = types_w_ev,
max_w_ev = max_w_ev,
RSF.object = F,
bandwidths = bandwidths,
mat_w = mat_w,
minleaf = param_rsf_reg$minleaf[j],
maxdepth = param_rsf_reg$maxdepth[j],
#nsplit = 10,
ntree = ntree,
mtry = length(grid_param$n_vars[i]),
y_no_cens_var = "Te"
)$perf_test)
}
)
)
# cox_reg
param_cox_reg = expand.grid(type_pred = NA,
algo = "cox_reg",
type_w = NA,
minleaf = NA,
maxdepth = NA,
max_w_mod = NA)
res_cox_reg = do.call(rbind, lapply(X = 1:nrow(param_cox_reg),
FUN = function(j){
unlist(cox_reg(y_var = "y",
delta_var = "delta",
x_vars = paste0("v",1:grid_param$n_vars[i]),
train = data_sim[train_lines,],
test = data_sim[-train_lines,],
types_w_ev = types_w_ev,
max_w_ev = max_w_ev,
max_time = grid_param$censoring_threshold[i],
phi = phi,
phi.args = phi.args,
cox_obj = F,
ev_methods = ev_methods,
mat_w = mat_w,
bandwidths = bandwidths,
y_no_cens_var = "Te"
)$perf_test)
}
)
)
return(cbind(rbind(param_RF_classic, param_w_RF_mode1, param_w_RF_mode2,
#param_w_gam,
param_rsf_reg, param_cox_reg),
iter = k,
rbind(res_RF_classic, res_w_RF_mode1, res_w_RF_mode2,
#res_w_gam,
res_rsf_reg, res_cox_reg)))
}
stopCluster(cl)
return(cbind( data.frame(grid_param[i,])[rep(as.character(i), nrow(res)),], res))
}
)
)
return(tab_results)
}
RF_w_theo = function( y_var,
x_vars,
delta_var,
train,
test = NULL,
phi = function(x){x},
phi.args = list(),
max_time = NULL,
ev_methods,
mat_w,
types_w_ev,
max_w_ev,
bandwidths = NULL,
RF.object = T,
y_no_cens_var,
ntree,
mtry,
maxdepth,
minleaf,
...){
# fonction only used in the simulated data case, to benchmark our method with the "classical"
## random forest algo used as if there was no censoring
# column names of mat_w should be explicit
if(!is.null(mat_w) & is.null(colnames(mat_w))) colnames(mat_w) = paste0("w",1:ncol(mat_w))
ev_methods <- match.arg(as.character(ev_methods), c("concordance", "group", "weighted"), several.ok = T)
if (is.null(bandwidths) & ("group" %in% ev_methods)) bandwidths = 50
types_w_ev = match.arg(as.character(types_w_ev), c("KM", "Cox", "RSF", "unif"), several.ok = T)
train = train[,c(x_vars, y_no_cens_var, delta_var, y_var)]
test = test[,c(x_vars, y_no_cens_var, delta_var, y_var)]
if (!is.null(test)){
data = rbind(train, test)
data$is_train = c(rep(1, nrow(train)), rep(0, nrow(test)))
} else {
data = train
data$is_train = 1
}
if (("group" %in% ev_methods) & (nrow(data) < 500)){
bandwidths = pmin(bandwidths, ifelse(!is.null(test), nrow(test), nrow(train)))
stop("group performance criteria must not be accurate because it
needs more observations to converge")
}
if (is.null(max_time)){max_time = max(train[which(train[, delta_var] == 1), y_var])}
data$y_prime = pmin(data[,y_var], max_time)
data$delta_prime = 1 * ((data[,delta_var] != 0) | (data[,y_var] >= max_time))
data$phi = sapply(X = 1:length(data$y_prime),
FUN = function(i){do.call(phi, c(list(x=data$y_prime[i]), phi.args))})
if(!is.null(y_no_cens_var)){
data$phi_non_censored = sapply(X = 1:nrow(data),
FUN = function(i){do.call(phi, c(list(x=pmin(data[,y_no_cens_var], max_time)[i]), phi.args))})
}
# Computation of the weitghts if not provided
if (is.null(mat_w)){
mat_w_train = matrix(rep(0, length(types_w_ev) * sum(data$is_train == 1) ), ncol = length(types_w_ev))
colnames(mat_w_train) = types_w_ev
if (!is.null(test)){
mat_w_test = matrix(rep(0, length(types_w_ev) * sum(data$is_train == 0) ), ncol = length(types_w_ev))
colnames(mat_w_test) = types_w_ev
}
for (j in 1:length(types_w_ev)){
mat_w_train[,j] = sword:::make_weights(data = data[data$is_train == 1, ],
y_name = "y_prime",
delta_name = "delta_prime",
y_name2 = y_var,
delta_name2 = delta_var,
type = types_w_ev[j],
max_ratio_weights = 1000,
x_vars = x_vars,
cens_mod_obj = FALSE)$weights
if (!is.null(test)){
mat_w_test[,j] = sword:::make_weights(data = data[data$is_train == 0, ],
y_name = "y_prime",
delta_name = "delta_prime",
y_name2 = y_var,
delta_name2 = delta_var,
type = types_w_ev[j],
max_ratio_weights = 1000,
x_vars = x_vars,
cens_mod_obj = FALSE)$weights
}
}
}
# Build mat_w_train & mat_w_test if mat_w provided
if (!is.null(mat_w)){
mat_w_train = mat_w[1:nrow(train),]
if (!is.null(test)){
mat_w_test = mat_w[(nrow(train)+1):(nrow(data)),]
}
}
# Thresholding of the weights_eval
## train
n_w_ev_modif_train = apply(X = mat_w_train, MARGIN = 2,
FUN = function(x){
x = sum(x > min(x[x > 0]) * max_w_ev)
})
mat_w_train = apply(X = mat_w_train, MARGIN = 2,
FUN = function(x){
x = pmin(x, min(x[x > 0]) * max_w_ev)
x = x / sum(x)
})
## test
if (!is.null(test)){
n_w_ev_modif_test = apply(X = mat_w_test, MARGIN = 2,
FUN = function(x){
x = sum(x > min(x[x > 0]) * max_w_ev)
})
mat_w_test = apply(X = mat_w_test, MARGIN = 2,
FUN = function(x){
x = pmin(x, min(x[x > 0]) * max_w_ev)
x = x / sum(x)
})
}
# Build train & test
train = data[data$is_train == 1,]
if (!is.null(test)){
test = data[data$is_train == 0,]
}
# Calibration of RSF model
rfSRC = randomForestSRC::rfsrc( formula = phi_non_censored ~ .,
data = train[,c("phi_non_censored",x_vars)],
forest = T,
ntree = ntree,
mtry = mtry,
nodesize = minleaf,
nodedepth = maxdepth,
...)
overfitted_predictions_RF_classic = randomForestSRC::predict.rfsrc(rfSRC ,
train[,x_vars])$predicted
# Performances on train test
perf_train = sword:::eval_model(predictions = overfitted_predictions_RF_classic,
data = train,
phi_name = "phi",
y_name = "y_prime",
delta_name = "delta_prime",
max_time = max_time,
ev_methods = ev_methods,
phi = phi,
phi.args = phi.args,
mat_w = mat_w_train,
phi_non_censored_name = "phi_non_censored",
bandwidths = bandwidths)
if (!is.null(test)){
test_predictions_RF_classic = randomForestSRC::predict.rfsrc(rfSRC,
test[,x_vars])$predicted
# Performances on test set
perf_test = sword:::eval_model(predictions = test_predictions_RF_classic,
data = test,
phi_name = "phi",
y_name = "y_prime",
delta_name = "delta_prime",
max_time = max_time,
ev_methods = ev_methods,
phi = phi,
phi.args = phi.args,
mat_w = mat_w_test,
phi_non_censored_name = "phi_non_censored",
bandwidths = bandwidths)
}
result = list(
pred_train = overfitted_predictions_RF_classic,
perf_train = perf_train,
train = train[,c(y_var, delta_var, "y_prime", "delta_prime", "phi", "phi_non_censored", x_vars)],
mat_w_train = mat_w_train,
max_time = max_time,
phi = phi,
phi.args = phi.args,
x_vars = x_vars,
cens_rate = sum(data$delta_prime == 0) / nrow(data)
)
if (RF.object){result$RF.object = rfSRC}
if (!is.null(test)){
result$pred = test_predictions_RF_classic
result$perf_test = perf_test
result$test = test[,c(y_var, delta_var, "y_prime", "delta_prime", "phi", "phi_non_censored", x_vars)]
result$mat_w_test = mat_w_test
}
return(result)
}
RF_classic = function(y_no_cens_var,
x_vars,
delta_var,
y_var,
train,
test = NULL,
phi = function(x){x},
phi.args = list(),
max_time = NULL,
ev_methods,
mat_w,
types_w_ev,
max_w_ev,
bandwidths = NULL,
RF.object = T,
ntree,
mtry,
maxdepth,
minleaf,
...){
# fonction only used in the simulated data case, to benchmark our method with the "classical"
## random forest algo used as if there was no censoring
# column names of mat_w should be explicit
if(!is.null(mat_w) & is.null(colnames(mat_w))) colnames(mat_w) = paste0("w",1:ncol(mat_w))
ev_methods <- match.arg(as.character(ev_methods), c("concordance", "group", "weighted"), several.ok = T)
if (is.null(bandwidths) & ("group" %in% ev_methods)) bandwidths = 50
types_w_ev = match.arg(as.character(types_w_ev), c("KM", "Cox", "RSF", "unif"), several.ok = T)
train = train[,c(x_vars, y_no_cens_var, delta_var, y_var)]
test = test[,c(x_vars, y_no_cens_var, delta_var, y_var)]
if (!is.null(test)){
data = rbind(train, test)
data$is_train = c(rep(1, nrow(train)), rep(0, nrow(test)))
} else {
data = train
data$is_train = 1
}
if (("group" %in% ev_methods) & (nrow(data) < 500)){
bandwidths = pmin(bandwidths, ifelse(!is.null(test), nrow(test), nrow(train)))
stop("group performance criteria must not be accurate because it
needs more observations to converge")
}
if (is.null(max_time)){max_time = max(train[which(train[, delta_var] == 1), y_var])}
data$y_prime = pmin(data[,y_var], max_time)
data$delta_prime = 1 * ((data[,delta_var] != 0) | (data[,y_var] >= max_time))
data$phi = sapply(X = 1:length(data$y_prime),
FUN = function(i){do.call(phi, c(list(x=data$y_prime[i]), phi.args))})
if(!is.null(y_no_cens_var)){
data$phi_non_censored = sapply(X = 1:nrow(data),
FUN = function(i){do.call(phi, c(list(x=pmin(data[,y_no_cens_var], max_time)[i]), phi.args))})
}
# Computation of the weitghts if not provided
if (is.null(mat_w)){
mat_w_train = matrix(rep(0, length(types_w_ev) * sum(data$is_train == 1) ), ncol = length(types_w_ev))
colnames(mat_w_train) = types_w_ev
if (!is.null(test)){
mat_w_test = matrix(rep(0, length(types_w_ev) * sum(data$is_train == 0) ), ncol = length(types_w_ev))
colnames(mat_w_test) = types_w_ev
}
for (j in 1:length(types_w_ev)){
mat_w_train[,j] = sword:::make_weights(data = data[data$is_train == 1, ],
y_name = "y_prime",
delta_name = "delta_prime",
y_name2 = y_var,
delta_name2 = delta_var,
type = types_w_ev[j],
max_ratio_weights = 1000,
x_vars = x_vars,
cens_mod_obj = FALSE)$weights
if (!is.null(test)){
mat_w_test[,j] = sword:::make_weights(data = data[data$is_train == 0, ],
y_name = "y_prime",
delta_name = "delta_prime",
y_name2 = y_var,
delta_name2 = delta_var,
type = types_w_ev[j],
max_ratio_weights = 1000,
x_vars = x_vars,
cens_mod_obj = FALSE)$weights
}
}
}
# Build mat_w_train & mat_w_test if mat_w provided
if (!is.null(mat_w)){
mat_w_train = mat_w[1:nrow(train),]
if (!is.null(test)){
mat_w_test = mat_w[(nrow(train)+1):(nrow(data)),]
}
}
# Thresholding of the weights_eval
## train
n_w_ev_modif_train = apply(X = mat_w_train, MARGIN = 2,
FUN = function(x){
x = sum(x > min(x[x > 0]) * max_w_ev)
})
mat_w_train = apply(X = mat_w_train, MARGIN = 2,
FUN = function(x){
x = pmin(x, min(x[x > 0]) * max_w_ev)
x = x / sum(x)
})
## test
if (!is.null(test)){
n_w_ev_modif_test = apply(X = mat_w_test, MARGIN = 2,
FUN = function(x){
x = sum(x > min(x[x > 0]) * max_w_ev)
})
mat_w_test = apply(X = mat_w_test, MARGIN = 2,
FUN = function(x){
x = pmin(x, min(x[x > 0]) * max_w_ev)
x = x / sum(x)
})
}
# Build train & test
train = data[data$is_train == 1,]
if (!is.null(test)){
test = data[data$is_train == 0,]
}
# Calibration of RSF model
rfSRC = randomForestSRC::rfsrc( formula = phi_non_censored ~ .,
data = train[,c("phi_non_censored",x_vars)],
forest = T,
ntree = ntree,
mtry = mtry,
nodesize = minleaf,
nodedepth = maxdepth,
...)
overfitted_predictions_RF_classic = randomForestSRC::predict.rfsrc(rfSRC ,
train[,x_vars])$predicted
# Performances on train test
perf_train = sword:::eval_model(predictions = overfitted_predictions_RF_classic,
data = train,
phi_name = "phi",
y_name = "y_prime",
delta_name = "delta_prime",
max_time = max_time,
ev_methods = ev_methods,
phi = phi,
phi.args = phi.args,
mat_w = mat_w_train,
phi_non_censored_name = "phi_non_censored",
bandwidths = bandwidths)
if (!is.null(test)){
test_predictions_RF_classic = randomForestSRC::predict.rfsrc(rfSRC,
test[,x_vars])$predicted
# Performances on test set
perf_test = sword:::eval_model(predictions = test_predictions_RF_classic,
data = test,
phi_name = "phi",
y_name = "y_prime",
delta_name = "delta_prime",
max_time = max_time,
ev_methods = ev_methods,
phi = phi,
phi.args = phi.args,
mat_w = mat_w_test,
phi_non_censored_name = "phi_non_censored",
bandwidths = bandwidths)
}
result = list(
pred_train = overfitted_predictions_RF_classic,
perf_train = perf_train,
train = train[,c(y_var, delta_var, "y_prime", "delta_prime", "phi", "phi_non_censored", x_vars)],
mat_w_train = mat_w_train,
max_time = max_time,
phi = phi,
phi.args = phi.args,
x_vars = x_vars,
cens_rate = sum(data$delta_prime == 0) / nrow(data)
)
if (RF.object){result$RF.object = rfSRC}
if (!is.null(test)){
result$pred = test_predictions_RF_classic
result$perf_test = perf_test
result$test = test[,c(y_var, delta_var, "y_prime", "delta_prime", "phi", "phi_non_censored", x_vars)]
result$mat_w_test = mat_w_test
}
return(result)
}
sw_reg
packages <- c(
"sword", # the methods of the article are implemented in the package sword
"doParallel",
"copula",
"dplyr"
)
has <- packages %in% rownames(installed.packages())
if(any(!has)) install.packages(packages[!has])
for(package in packages){ library(package, character.only = TRUE)}
res_simul_mix_dep_log_summary = res_simul_mix_dep_log %>%
group_by(n_simul, n_vars, prop_censored, target_R2_C, censoring_threshold, mixture_T, mixture_T_type, mixture_T_n_groups,
type_pred, algo, type_w, minleaf, maxdepth, max_w_mod) %>%
summarise(mean_R2 = round(mean(criteria_non_censored.R2),5), sd_R2 = round(sd(criteria_non_censored.R2),5),
mean_Kendall = round(mean(criteria_non_censored.Kendall),5), sd_Kendall = round(sd(criteria_non_censored.Kendall),5),
mean_concordance = round(mean(concordance.concordant),5), sd_concordance = round(sd(concordance.concordant),5),
mean_KM_R2 = round(mean(criteria_weighted.KM_R2),5), sd_KM_R2 = round(sd(criteria_weighted.KM_R2),5),
mean_Cox_R2 = round(mean(criteria_weighted.Cox_R2),5), sd_Cox_R2 = round(sd(criteria_weighted.Cox_R2),5),
mean_RSF_R2 = round(mean(criteria_weighted.RSF_R2),5), sd_RSF_R2 = round(sd(criteria_weighted.RSF_R2),5),
mean_mse = round(mean(criteria_non_censored.mse),5), sd_mse = round(sd(criteria_non_censored.mse),5),
mean_KM_mse = round(mean(criteria_weighted.KM_mse),5), sd_KM_mse = round(sd(criteria_weighted.KM_mse),5),
mean_Cox_mse = round(mean(criteria_weighted.Cox_mse),5), sd_Cox_mse = round(sd(criteria_weighted.Cox_mse),5),
mean_RSF_mse = round(mean(criteria_weighted.RSF_mse),5), sd_RSF_mse = round(sd(criteria_weighted.RSF_mse),5),
mean_R2_20 = round(mean(criteria_group.R2_20),5), sd_R2_20 = round(sd(criteria_group.R2_20),5),
mean_Kendall_20 = round(mean(criteria_group.Kendall_20),5), sd_Kendall_20 = round(sd(criteria_group.Kendall_20),5))
packages <- c(#"ggplot2",
"survival",
"randomForestSRC",
#"ranger",
#"caret",
#"MASS",
#"reshape",
"dplyr",
"doParallel",
"mgcv"
)
has   <- packages %in% rownames(installed.packages())
if(any(!has)) install.packages(packages[!has])
for(i in packages){ library(i,character.only = TRUE)}
setwd("~/Google Drive/missions forsides/Santiane 2016/weighted_RF_survival/test_real_data")
setwd("~/Google Drive/GitHub/impact-churn-health-insurance/test-real-data-review")
setwd("~/Google Drive/GitHub/impact-churn-health-insurance/test-real-data-review")
load("../../data/resiliation_2016.RData")
load("/Users/yohann/Google Drive/missions_forsides/Santiane 2016/data/resiliation_2016.RData")
?cox_reg
